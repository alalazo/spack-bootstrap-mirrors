name: "GnuPG and OpenSSL"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      x86_64: ${{ steps.filter.outputs.x86_64 }}
      arm64ppc64le: ${{ steps.filter.outputs.arm64ppc64le }}
    steps:
    - uses: actions/checkout@v2
      if: ${{ github.event_name == 'push' }}
      with:
        fetch-depth: 0
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        # See https://github.com/dorny/paths-filter/issues/56 for the syntax used below
        filters: |
          x86_64:
          - './gnupg_openssl/Dockerfile.x86_64'
          - './gnupg_openssl/gnupg.patch'
          arm64ppc64le:
          - './gnupg_openssl/Dockerfile.manylinux2014'

  x86_64_mirrors:
    runs-on: ubuntu-latest
    needs: ['changes']
    env:
      PLATFORM: x86_64
      COMMIT_SHA: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v2

      # Setup tags to be used for docker images
      - uses: crazy-max/ghaction-docker-meta@v1
        id: docker_meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/gnupg_openssl_x86_64

      # Login to Github Packages
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - uses: docker/setup-buildx-action@v1

      # Build and eventually push to registry
      - uses: docker/build-push-action@v2
        if: ${{ needs.changes.outputs.x86_64 == 'true' }}
        with:
          file: ./gnupg_openssl/Dockerfile.x86_64
          platforms: linux/amd64
          pull: ${{ github.event_name == 'pull_request' }}
          push: true
          tags: ghcr.io/alalazo/gnupg_openssl_x86_64:latest
          labels: ${{ steps.docker_meta.outputs.labels }}
  
  upload-x86-64:
    runs-on: ubuntu-latest
    needs: [ x86_64_mirrors ]
    steps:
      - uses: actions/checkout@v2
      - run: |
          . ./gnupg_openssl/copy_mirror_x86_64.sh
      - uses: actions/upload-artifact@v2
        with:
          name: gnupg_openssl_binary_mirror
          path: binary-mirror

  darwin:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - run: |
          brew install gawk perl
          git clone https://github.com/spack/spack.git
          . spack/share/spack/setup-env.sh
          spack external find --not-buildable gawk perl
          spack install gnupg cflags="-mmacosx-version-min=10.13" target=x86_64
          spack install openssl cflags="-mmacosx-version-min=10.13" target=x86_64
          mkdir -p binary-mirror
          spack buildcache create -d $PWD/binary-mirror -a -u -f gnupg
          spack buildcache create -d $PWD/binary-mirror -a -u -f openssl
      - uses: actions/upload-artifact@v2
        with:
          name: gnupg_openssl_binary_mirror
          path: binary-mirror

  arm64ppc64le:
    runs-on: ubuntu-latest
    needs: [ changes ]

    steps:
      - uses: actions/checkout@v2

      # Setup tags to be used for docker images
      - uses: crazy-max/ghaction-docker-meta@v1
        id: docker_meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/gnupg_openssl_manylinux2014

      # Login to Github Packages
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - uses: docker/setup-qemu-action@v1
        id: qemu
        with:
          platforms: linux/ppc64le,linux/arm64

      - uses: docker/setup-buildx-action@v1

      # Build and eventually push to registry
      - uses: docker/build-push-action@v2
        # Build and push only if the Dockerfile changed
        if: ${{ needs.changes.outputs.arm64ppc64le == 'true' }}
        with:
          file: ./gnupg_openssl/Dockerfile.manylinux2014
          platforms: linux/arm64,linux/ppc64le
          pull: ${{ github.event_name == 'pull_request' }}
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/gnupg_openssl_manylinux2014:latest
          labels: ${{ steps.docker_meta.outputs.labels }}

  #upload-arm64-ppc64le:
  #  runs-on: ubuntu-latest
  #  needs: [ arm64ppc64le ]
  #  steps:
  #    - uses: actions/checkout@v2
  #    - run: |
  #        . ./copy_mirror_arm_ppc.sh
  #    - uses: actions/upload-artifact@v2
  #      with:
  #        name: clingo_binary_mirror
  #        path: |
  #          binary-mirror