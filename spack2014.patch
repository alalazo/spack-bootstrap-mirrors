diff --git a/lib/spack/external/archspec/cpu/detect.py b/lib/spack/external/archspec/cpu/detect.py
index e65076c788..9fcc268d69 100644
--- a/lib/spack/external/archspec/cpu/detect.py
+++ b/lib/spack/external/archspec/cpu/detect.py
@@ -228,7 +228,10 @@ def compatibility_check_for_power(info, target):
     """Compatibility check for PPC64 and PPC64LE architectures."""
     basename = platform.machine()
     generation_match = re.search(r"POWER(\d+)", info.get("cpu", ""))
-    generation = int(generation_match.group(1))
+    try:
+       generation = int(generation_match.group(1))
+    except:
+       return False
 
     # We can use a target if it descends from our machine type and our
     # generation (9 for POWER9, etc) is at least its generation.
diff --git a/lib/spack/spack/architecture.py b/lib/spack/spack/architecture.py
index ba2d824010..17704d6f68 100644
--- a/lib/spack/spack/architecture.py
+++ b/lib/spack/spack/architecture.py
@@ -67,9 +67,9 @@
 import llnl.util.tty as tty
 import llnl.util.lang as lang
 
-import spack.compiler
-import spack.compilers
-import spack.config
+#import spack.compiler
+#import spack.compilers
+#import spack.config
 import spack.paths
 import spack.error as serr
 import spack.util.executable
@@ -604,6 +604,8 @@ def __call__(self):
 def use_platform(new_platform):
     global platform, all_platforms
 
+    import spack.config
+
     msg = '"{0}" must be an instance of Platform'
     assert isinstance(new_platform, Platform), msg.format(new_platform)
 
diff --git a/lib/spack/spack/compilers/__init__.py b/lib/spack/spack/compilers/__init__.py
index 83503f09ed..8663f24743 100644
--- a/lib/spack/spack/compilers/__init__.py
+++ b/lib/spack/spack/compilers/__init__.py
@@ -23,7 +23,7 @@
 import spack.spec
 import spack.config
 import spack.compiler
-import spack.architecture
+#import spack.architecture
 import spack.util.imp as simp
 from spack.util.environment import get_path
 from spack.util.naming import mod_to_class
@@ -495,6 +495,7 @@ def all_os_classes():
     Return the list of classes for all operating systems available on
     this platform
     """
+    import spack.architecture
     classes = []
 
     platform = spack.architecture.platform()
diff --git a/lib/spack/spack/config.py b/lib/spack/spack/config.py
index 63839cfb05..5f22568e57 100644
--- a/lib/spack/spack/config.py
+++ b/lib/spack/spack/config.py
@@ -48,8 +48,8 @@
 from llnl.util.filesystem import mkdirp
 
 import spack.paths
-import spack.architecture
-import spack.compilers
+#import spack.architecture
+#import spack.compilers
 import spack.schema
 import spack.schema.compilers
 import spack.schema.mirrors
@@ -755,6 +755,7 @@ def override(path_or_scope, value=None):
 
 def _add_platform_scope(cfg, scope_type, name, path):
     """Add a platform-specific subdirectory for the current platform."""
+    import spack.architecture
     platform = spack.architecture.platform().name
     plat_name = '%s/%s' % (name, platform)
     plat_path = os.path.join(path, platform)
@@ -1219,7 +1220,7 @@ def use_configuration(*scopes_or_paths):
         Configuration object associated with the scopes passed as arguments
     """
     global config
-
+    import spack.compilers
     # Normalize input and construct a Configuration object
     configuration = _config_from(scopes_or_paths)
     config.clear_caches(), configuration.clear_caches()
@@ -1338,3 +1339,6 @@ def get_path(path, data):
 
         # give up and return None if nothing worked
         return None
+
+config = _config()
+
